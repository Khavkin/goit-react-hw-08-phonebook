{"version":3,"file":"static/js/417.e2d529b1.chunk.js","mappings":"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","sources":["Pages/Register/Register.jsx"],"sourcesContent":["import {\n  Avatar,\n  Box,\n  Button,\n  Container,\n  CssBaseline,\n  Grid,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport * as Yup from 'yup';\n//import SignIn from 'components/SignIn/SignIn';\nimport { useFormik } from 'formik';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useSignUpMutation } from 'api/swagger-api';\nimport { UseAuth } from 'hooks/useAuth';\nimport { ClipLoader } from 'react-spinners';\nimport { toast } from 'react-toastify';\n\nconst mailRegExp =\n  /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\nconst validationSchema = Yup.object({\n  email: Yup.string().matches(mailRegExp, 'Not a proper email').required(),\n  password: Yup.string()\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    // .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    // .matches(/[^\\w]/, 'Password requires a symbol')\n    .required(),\n  confirm: Yup.string().oneOf(\n    [Yup.ref('password'), null],\n    'Must match \"password\" field value'\n  ),\n});\n\nexport const RegisterForm = () => {\n  const navigate = useNavigate();\n  const [signUp, { isLoading: isLogging }] = useSignUpMutation();\n  const { isRefreshing } = UseAuth();\n\n  const formik = useFormik({\n    initialValues: { userName: '', email: '', password: '', confirm: '' },\n    validationSchema: validationSchema,\n    onSubmit: async (values, { resetForm }) => {\n      const { userName, email, password } = values;\n\n      try {\n        await signUp({\n          name: userName,\n          email: email,\n          password: password,\n        }).unwrap();\n        resetForm();\n        navigate('/contacts');\n      } catch (error) {\n        const { status, data } = error;\n        toast.error(\n          `Error status ${status}. ${data?.name}-${\n            data?.code\n          } in ${JSON.stringify(data?.keyValue)} `,\n          {\n            position: toast.POSITION.TOP_CENTER,\n            autoClose: false,\n          }\n        );\n\n        //console.log(error);\n      }\n    },\n  });\n\n  return (\n    !isRefreshing && (\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign up\n          </Typography>\n          <Box\n            component=\"form\"\n            onSubmit={formik.handleSubmit}\n            noValidate\n            sx={{ mt: 1 }}\n          >\n            <TextField\n              autoComplete=\"given-name\"\n              name=\"userName\"\n              required\n              fullWidth\n              id=\"userName\"\n              label=\"User Name\"\n              autoFocus\n              value={formik.values.userName}\n              onChange={formik.handleChange}\n              error={formik.touched.userName && Boolean(formik.errors.userName)}\n              helperText={formik.touched.userName && formik.errors.userName}\n            />\n\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n              error={formik.touched.email && Boolean(formik.errors.email)}\n              helperText={formik.touched.email && formik.errors.email}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={formik.values.password}\n              onChange={formik.handleChange}\n              error={formik.touched.password && Boolean(formik.errors.password)}\n              helperText={formik.touched.password && formik.errors.password}\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"confirm\"\n              label=\"Password confirm\"\n              type=\"password\"\n              id=\"confirm\"\n              autoComplete=\"current-password\"\n              value={formik.values.confirm}\n              onChange={formik.handleChange}\n              error={formik.touched.confirm && Boolean(formik.errors.confirm)}\n              helperText={formik.touched.confirm && formik.errors.confirm}\n            />\n\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              {isLogging ? (\n                <ClipLoader color={'primary.contrastText'} size={14} />\n              ) : (\n                'Sign Up'\n              )}\n            </Button>\n            <Grid container>\n              {/* <Grid item xs>\n                  <Link href=\"#\" variant=\"body2\">\n                    Forgot password?\n                  </Link>\n                </Grid> */}\n              <Grid item>\n                <Link to=\"/login\" variant=\"body2\">\n                  {'Already have an account? Sign in'}\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n        {/* <Copyright sx={{ mt: 8, mb: 4 }} /> */}\n      </Container>\n    )\n  );\n};\n\nexport default RegisterForm;\n"],"names":["validationSchema","Yup","email","matches","required","password","min","confirm","oneOf","navigate","useNavigate","useSignUpMutation","signUp","isLogging","isLoading","isRefreshing","UseAuth","formik","useFormik","initialValues","userName","onSubmit","values","resetForm","name","unwrap","status","data","toast","code","JSON","stringify","keyValue","position","autoClose","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined","Typography","variant","handleSubmit","noValidate","mt","TextField","autoComplete","fullWidth","id","label","autoFocus","value","onChange","handleChange","error","touched","Boolean","errors","helperText","margin","type","Button","mb","ClipLoader","color","size","Grid","container","item","to"],"sourceRoot":""}